<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.example</groupId>
  <artifactId>Task2</artifactId>
  <version>1.0</version>
  <packaging>jar</packaging>

  <name>Task2</name>

  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
    <!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.7</version>
    </dependency>
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>1.78</version>
    </dependency>

  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>8</source>
          <target>8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.2.0</version>
        <configuration>
          <archive>
            <manifest>
              <!--
                  Dzieki temu ustawieniu mozesz uruchamiac aplikacje za pomoca:
                  java -jar <nazwa_pliku>.jar
                  Zeby java -jar zadzialalo musi wiedziec w ktorej klasie ma szukac main
                  i wlasnie ponizej wskazujesz ta klase
              -->
              <mainClass>org.example.App</mainClass>
            </manifest>
          </archive>
          <descriptorRefs>
            <!--
                descriptorRef okresla schemat wedlug ktorego bedziemy budowac nasz wynikowy
                plik. Nas oczywiscie interesuje jar-with-dependencies ktory bedzie jarem
                z zawartymi w nim dependencies z naszego projektu

                Jakie inne mamy tutaj mozliwosci jezeli chodzi o descriptionRef?
                Patrz dokumentacja:
                https://maven.apache.org/plugins/maven-assembly-plugin/descriptor-refs.html
            -->
            <descriptorRef>jar-with-dependencies</descriptorRef>
          </descriptorRefs>
          <!-- zeby nam nie dolaczalo do nazwy z finalName prefix 'jar-with-dependencies' -->
          <appendAssemblyId>false</appendAssemblyId>
        </configuration>
        <executions>
          <!--
              Dzieki temu execution plugin wie ze ma wykonac opcje assembly:single
              kiedy my wywolujemy mvn package. Kiedy wywolasz mvn clean install
              z poziomu glownego pom.xml to posrednio spowoduje to wykonanie
              mvn package na tym module wiec wystarczy pozniej juz tylko wywolywac
              mvn clean install z poziomu glownego pom.xml.
          -->
          <execution>
            <id>make-assembly</id> <!-- this is used for inheritance merges -->
            <phase>package</phase> <!-- bind to the packaging phase -->
            <goals>
              <goal>single</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
